import base64
                               
# Tran Thinh Bot
# Catoon Community
# Base64 encoded Python file
# Encoded by Tran Thinh Bot
python_code = ''
exec(base64.b64decode(python_code.encode('utf-8')).decode('utf-8'))
